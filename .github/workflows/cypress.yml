name: Cypress Tests

# Trigger workflow on:
# - Push to main branch (except version tags)
# - Pull requests to main branch
on:
  push:
    branches: [main]
    tags-ignore: ['v*.*.*'] # Ignore version tags to avoid duplicate runs
  pull_request:
    branches: [main]
  workflow_call: {} # Allow this workflow to be called from other workflows

jobs:
  # Run Cypress end-to-end tests
  cypress-run:
    runs-on: ubuntu-latest # Use latest Ubuntu runner

    # Configure PostgreSQL service for testing
    services:
      postgres:
        image: postgres:17 # Use PostgreSQL 17
        env:
          POSTGRES_USER: postgres # Default superuser
          POSTGRES_PASSWORD: postgres # Password for the superuser
          POSTGRES_DB: frizbee_test # Database name for tests
        ports:
          - 5432:5432 # Expose PostgreSQL port
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4 # Checkout code from repository

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use Node.js 20
          cache: 'npm' # Cache npm dependencies

      # Step 3: Install project dependencies
      - name: Install dependencies
        run: npm ci # Clean install for CI environment

      # Step 4: Setup database
      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/frizbee_test
          NODE_ENV: test
          NUXT_PUBLIC_AUTH_ORIGIN: http://localhost:3000
          NUXT_ADMIN_EMAIL: admin@test.com
          NUXT_ADMIN_PASSWORD: admin123
          NUXT_ADMIN_USERNAME: admin
          NUXT_JWT_SECRET: test-jwt-secret
        run: |
          npx prisma generate
          npx prisma migrate dev --name init --create-only
          npx prisma migrate deploy
          npx prisma db seed

      # Step 5: Run Cypress tests
      - name: Run Cypress tests
        uses: cypress-io/github-action@v6
        with:
          build: npm run build # Build the application
          start: npm run preview # Start the preview server
          browser: chrome # Use Chrome browser
          config-file: cypress.config.ts # Use custom Cypress config
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}} # For GitHub API access
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/frizbee_test # DB connection
          NODE_ENV: test
          NUXT_PUBLIC_AUTH_ORIGIN: http://localhost:3000
          NUXT_ADMIN_EMAIL: admin@test.com
          NUXT_ADMIN_PASSWORD: admin123
          NUXT_ADMIN_USERNAME: admin
          NUXT_JWT_SECRET: test-jwt-secret

      # Step 6: Upload test results as artifacts
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always() # Upload even if tests fail
        with:
          name: cypress-results
          path: | # Upload test artifacts
            cypress/videos     # Test recordings
            cypress/screenshots  # Screenshots of failures
            cypress/results     # Test results
