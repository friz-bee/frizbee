name: Build, Push and Deploy Docker Image

# D√©clenche la pipeline lorsqu'un tag correspondant √† 'v*.*.*' est pouss√©
on:
  push:
    tags:
      - 'v*.*.*'

# D√©finition des permissions n√©cessaires pour les actions
permissions:
  contents: read
  packages: write

jobs:
  # Job de construction et push de l'image Docker
  build-and-push:
    runs-on: ubuntu-latest # L'environnement d'ex√©cution est une machine Ubuntu

    steps:
      # √âtape 1 : Checkout du code depuis le d√©p√¥t
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # √âtape 2 : Configuration de Docker Buildx pour la construction multi-architecture
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # √âtape 3 : Connexion au registre de conteneurs GitHub (ghcr.io)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # √âtape 4 : Extraction du nom du tag pour l'utiliser comme version de l'image Docker
      - name: Extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # √âtape 5 : Construction et push de l'image Docker vers le registre
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: .
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/frizbee:${{ env.TAG_NAME }}
            ghcr.io/${{ github.repository_owner }}/frizbee:latest

  # Job de d√©ploiement sur le serveur
  deploy:
    needs: build-and-push # Ce job d√©pend du job pr√©c√©dent (build-and-push)
    runs-on: ubuntu-latest
    steps:
      # √âtape 1 : Connexion au serveur et d√©ploiement de l'image Docker
      - name: Connect to server and deploy
        uses: appleboy/ssh-action@v1.2.0 # Utilisation de l'action SSH pour se connecter au serveur et ex√©cuter des commandes
        with:
          # Variables d'environnement pour la connexion SSH
          # Ces secrets doivent √™tre configur√©s dans les param√®tres du d√©p√¥t GitHub
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # Connexion au registre Docker GitHub Container Registry avec un token s√©curis√©.
          # T√©l√©chargement de la derni√®re version de l'image Docker depuis le registre.
          # Arr√™t et suppression de l'ancien conteneur si pr√©sent pour √©viter les conflits.
          # Lancement d'un nouveau conteneur avec l'image t√©l√©charg√©e et configuration des ports et variables d'environnement.
          # Connexion du conteneur au r√©seau Docker sp√©cifique pour la communication entre services.
          script: |
            set -e  # Exit the script if any command fails

            echo "üîÑ Connecting to the server..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "üì• Pulling the latest Docker image..."
            docker pull ghcr.io/${{ github.repository_owner }}/frizbee:latest

            echo "üõë Stopping and removing the existing container..."
            docker stop frizbee || true
            docker rm frizbee || true

            echo "üöÄ Starting the new container..."
            docker run -d \
              --name frizbee \
              --restart unless-stopped \
              -p 3002:3000 \
              --env-file ~/frizbee/.env \
              ghcr.io/${{ github.repository_owner }}/frizbee:latest

            echo "üîó Connecting the container to the network..."
            docker network connect frizbee_webnet frizbee

            echo "‚úÖ Deployment completed successfully!"
