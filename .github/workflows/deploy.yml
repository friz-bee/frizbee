name: Build, Push and Deploy Docker Image

# Trigger workflow when a version tag is pushed (e.g., v1.0.0)
on:
  push:
    tags:
      - 'v*.*.*'

# Required permissions for GitHub Actions
permissions:
  contents: read # Read repository contents
  packages: write # Push to GitHub Container Registry

jobs:
  # Run Cypress tests before building the Docker image
  cypress-tests:
    uses: ./.github/workflows/cypress.yml
    secrets: inherit # Pass all secrets to the Cypress workflow

  # Build and push the Docker image to GitHub Container Registry
  build-and-push:
    needs: cypress-tests # Only run if tests pass
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      # Step 2: Verify migrations exist
      - name: Check migrations
        run: |
          if [ ! -d "prisma/migrations" ]; then
            echo "‚ùå No migrations found in prisma/migrations"
            exit 1
          fi
          echo "‚úÖ Migrations found"

      # Step 3: Set up Docker Buildx for multi-architecture builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # Step 4: Log in to GitHub Container Registry
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Step 5: Extract the tag name to use as Docker image version
      - name: Extract tag name
        run: echo "TAG_NAME=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      # Step 6: Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.13.0
        with:
          context: . # Use the current directory as build context
          push: true # Push the image after building
          tags: |
            ghcr.io/${{ github.repository_owner }}/frizbee:${{ env.TAG_NAME }}
            ghcr.io/${{ github.repository_owner }}/frizbee:latest

  # Deploy the application to the production server
  deploy:
    needs: build-and-push # Only run if build succeeds
    runs-on: ubuntu-latest
    steps:
      # Connect to the server and deploy the new Docker container
      - name: Connect to server and deploy
        uses: appleboy/ssh-action@v1.2.0
        with:
          # SSH connection details (configured in repository secrets)
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          # Deployment script
          script: |
            set -e  # Exit the script if any command fails

            # Step 1: Log in to GitHub Container Registry
            echo "üîÑ Connecting to the server..."
            echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Step 2: Pull the latest Docker image
            echo "üì• Pulling the latest Docker image..."
            docker pull ghcr.io/${{ github.repository_owner }}/frizbee:latest

            # Step 3: Stop and remove the existing container
            echo "üõë Stopping and removing the existing container..."
            docker stop frizbee || true
            docker rm frizbee || true

            # Step 4: Check database connection
            echo "üîç Checking database connection..."
            docker run --rm \
              --network frizbee_webnet \
              --env-file ~/frizbee/.env \
              ghcr.io/${{ github.repository_owner }}/frizbee:latest \
              npx prisma db push --skip-generate

            # Step 5: Run Prisma migrations
            echo "üîÑ Running database migrations..."
            docker run --rm \
              --network frizbee_webnet \
              --env-file ~/frizbee/.env \
              ghcr.io/${{ github.repository_owner }}/frizbee:latest \
              npx prisma migrate deploy

            # Step 6: Seed the database
            echo "üå± Seeding the database..."
            docker run --rm \
              --network frizbee_webnet \
              --env-file ~/frizbee/.env \
              ghcr.io/${{ github.repository_owner }}/frizbee:latest \
              npx prisma db seed

            # Step 7: Start a new container with the latest image
            echo "üöÄ Starting the new container..."
            docker run -d \
              --name frizbee \
              --restart unless-stopped \
              -p 3002:3000 \
              --env-file ~/frizbee/.env \
              ghcr.io/${{ github.repository_owner }}/frizbee:latest

            # Step 8: Connect the container to the Docker network
            echo "üîó Connecting the container to the network..."
            docker network connect frizbee_webnet frizbee

            echo "‚úÖ Deployment completed successfully!"
